{% extends 'room/layout.html.twig' %}

{% block title %}Messages{% endblock %}

{% block body %}
    <h1>Salons</h1>
    <h2></h2>
    <div class="room__content">
        <ul class="room">

            {% for user in users %}
                {% if user.room[0] is defined %}
                    <li class="room__list display_room" id="{{ user.room[0].id }}" data-id="{{ user.id }}">
                        <img src="{{ user.image }}" alt="{{ user.username }}">
                        <p>{{ user.username }}</p>
                    </li>
                {% else %}
                    <li class="room__list create-new-room" id="{{ user.id }}">
                        <img src="{{ user.image }}" alt="{{ user.username }}">
                        <p>{{ user.username }}</p>
                    </li>
                {% endif %}
            {% else %}
                <li>Vous n'avez aucun amis !</li>
            {% endfor %}

        </ul>
        <div id="messages__container">

        </div>
        <div class="form__messages">
            {{ form_start(form) }}
                {{ form_row(form.content,{'attr' : {
                    'class' : 'form__content_textarea'
                }}) }}



                {{ form_row(form.submit, { 'attr' : {
                    'class' : 'form__content_send'
                }}) }}
            {{ form_end(form) }}
        </div>
    </div>

{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const createRoom = document.querySelectorAll('.create-new-room');
            const displayRoom = document.querySelectorAll('.display_room');
            const messageContainer = document.querySelector('#messages__container');
            const messageContent = document.querySelector('#message_content');
            const messageSubmit = document.querySelector('#message_submit');
            const userName = document.querySelector('h2');

            /**
             * Display messages when the user select another user in his list
             * @param   elem     HTMLElement        The element select by the user
             * @returns {Promise<void>}
             */
            const displayMessageByRoom = async (elem) => {
                let parse = new DOMParser();

                try {
                    let response = await fetch(`${window.location.origin}/room/${elem.getAttribute('id')}`);
                    if (response.ok) {
                        let data = await response.text();
                        let elementHTML = await parse.parseFromString(data, 'text/html');
                        messageContainer.innerHTML = "";
                        messageContainer.append(elementHTML.querySelector('#messages__list'));
                    } else {
                        console.error(response.status)
                    }
                } catch (e) {
                    console.error(e)
                }

                try {
                    let response = await fetch(`${window.location.origin}/user/info`, {
                        method: 'post',
                        body: JSON.stringify({ id : elem.dataset.id })
                    });
                    if (response.ok) {
                        let data = await response.json();
                        console.log(userName);
                        userName.textContent = data.user;
                    } else {
                        console.error(response.status)
                    }

                } catch (e) {
                    console.error(e);
                }
            };

            /**
             * Submit the content for create new message
             * @returns {Promise<void>}
             */
            const submitInformations = async () => {

                try {
                    let response = async fetch(`${window.location.origin}/message/create`, {
                        method: 'post',
                        headers: {'X-Requested-With' : 'XMLHttpRequest'},
                        body: json.stringify({content: messageContent.value, recipient : cc, room : })
                    })
                    if (response.ok) {
                        let data = reponse.json();
                    } else {
                        console.log(response.status);
                    }
                } catch (e) {
                    console.log(e)
                }

            };

            /**
             * Create room for talk to another user
             * @param elem      HTMLElement     The element select by the user for talk to another user
             * @returns {Promise<void>}
             */
            const createRoomByUser = async (elem) => {

                try {
                    let response = await fetch(`${window.location.origin}/room/new`, {
                        method : 'post',
                        headers : {'X-Requested-With': 'XMLHttpRequest'},
                        body:JSON.stringify({
                            'name' : elem.textContent,
                            'picture' : elem.firstChild.getAttribute('src'),
                            'id' : elem.getAttribute('id')
                        })
                    });
                    if (response.ok) {
                        let data = await response.json();
                        //window.location.replace(window.location.href+`${data.id}`);
                    } else {
                        console.error(response.status);
                    }
                } catch (e) {
                    console.error(e);
                }
            };

            displayRoom.forEach(element => element.addEventListener('click', () => displayMessageByRoom(element)));
            createRoom.forEach(elemen => elemen.addEventListener('click', () => createRoomByUser(elemen)));
            messageSubmit.addEventListener('click', () => submitInformations());
        })

    </script>
{% endblock %}