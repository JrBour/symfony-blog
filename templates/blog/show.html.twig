{% extends 'layout/layout.html.twig' %}
{% block title %}{{ blog.title|capitalize }}{% endblock %}
{% block section %}
    <div class="success">
        <p></p>
    </div>
    <div class="error">
        <p></p>
    </div>

    <header style="background: url('{{blog.image}}'); background-position: center;background-size: cover;" class="header_post">
        <h1>{{ blog.title }}</h1>
    </header>

    <p>{{ blog.description }}</p>
    <p>{{ blog.createdAt|date("d-m-Y")  }}</p>

    {{form_start(form)}}
    <div class="form-group">
        {{form_row(form.content,{ 'attr' : {
            'class' : 'form-control'
        }})}}
    </div>
    {{form_row(form.submit,{ 'attr' : {
        'class' : 'btn btn-primary'
    }})}}
    {{form_end(form)}}

    {% if comments %}
        <div id="comment__container">
            <div class="comments_list" id="commentList">
                {% for comment in comments %}
                    <div class="comments" data-id="{{comment.id}}">
                        <div class="card-header">
                            <img src="{{ comment.author.image}}" alt="" class="profil_picture_post">
                        </div>
                        <div class="card">
                            <div class="card-body">
                                <p class="card-text"><a href="{{ path('profil_user', {id : comment.author.id}) }}" class="profil">{{comment.author.username}}</a><span class="content">{{ comment.content }}</span></p>
                            </div>
                            {% if app.user.id is defined and app.user.id == comment.author.id %}
                                <button type="button" name="button" class="show">...</button>
                                <div class="features">
                                    <p class="edit" data-id="{{comment.id}}">Editer</p>
                                    <p class="remove_comment" data-id="{{comment.id}}">Supprimer</p>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
    {% endif %}
{% endblock %}
{% block javascripts %}
    <script type="text/javascript">


        const show = document.querySelector('.show');
        const edit = document.querySelector('.edit');
        const removeComment = document.querySelector('.remove_comment');
        const comments = document.querySelector('.comments');
        const editContent = document.querySelector('.editContentForm');
        const commentList = document.querySelector('#commentList');
        const commentContainer = document.querySelector('#comment__container');
        const parse = new DOMParser();
        let displayForm = false;
        let features = document.querySelector('.features');
        let success = document.querySelector('.success');


        if (show){
            features.style.display = 'none';

            show.addEventListener('click', (e) => {
                e.preventDefault();
                features.style.display = (features.style.display == 'none') ? 'block' : 'none';
            })

            edit.addEventListener('click', e => {
                e.preventDefault();
                features.style.display = 'none';

                const dataId = edit.dataset.id;
                const card = edit.parentElement.parentElement;
                const cardText = card.firstElementChild.firstElementChild.lastElementChild
                const textContent = cardText.textContent;

                cardText.innerHTML = '';
                cardText.insertAdjacentHTML('beforeend',`<form name="editContent" onsubmit="editFormSubmit(event)" class="editContentForm"><input type="text" value="${textContent}" data-id="${dataId}" class="editContent" autofocus/></form>`)

                displayForm = true
            })

            removeComment.addEventListener('click', async e => {
                e.preventDefault();


                const elementToRemove = document.querySelector(`.comments[data-id="${removeComment.dataset.id}"]`);
                commentList.removeChild(elementToRemove);

                const deleteComment = await fetch(`/comment/remove/${removeComment.dataset.id}`,{
                    method: 'get',
                    headers: {'X-Requested-With' : 'XMLHttpRequest'}
                });
                const res = await deleteComment.json();

                success.style.display = 'block';
                success.firstElementChild.innerHTML = res.success;
                setTimeout(()=> {success.style.display = 'none'}, 2000);

            })
        }


        /**
         * Edit the commentary selected
         * @param e       Event         The event
         * @returns Void
         */
        async function editFormSubmit (e) {
            e.preventDefault();

            const dataId = document.querySelector('.editContent').dataset.id;
            const input = document.querySelector('input.editContent');
            const textContent = input.value;
            const content = input.parentElement.parentElement;

            const editComment = await fetch(`/comment/edit/${dataId}`, {
                method: 'post',
                headers: {'X-Requested-With': 'XMLHttpRequest'},
                body: JSON.stringify({id: dataId, content: textContent})
            })
            const res = await editComment.json();

            success.style.display = 'block';
            success.firstElementChild.innerHTML = res.success;
            setTimeout(() => success.style.display = 'none', 2000)
            content.innerText = input.value;
            content.removeChild(input.parentElement);
        }


        document.querySelector('[name=comment]').addEventListener('submit', async (e) => {
            e.preventDefault();
            const split = window.location.href.split('/');

            try {
                const response = await fetch(`/blog/${parseFloat(split[split.length - 1])}`, {
                    method : 'post',
                    headers: {'X-Requested-With' : 'XMLHttpRequest'},
                    body: JSON.stringify({content : $('#comment_content').val()})
                });

                if (response.ok) {
                    const data = await response.json();
                } else {
                    console.error(response.status);
                }

            } catch(e) {
                console.error(e);
            }

            try {
                const htmlResponse = await fetch(`/blog/${parseFloat(split[split.length - 1])}`);
                if (htmlResponse.ok) {
                    const data = await htmlResponse.text();
                    const elementHtml = await parse.parseFromString(data, 'text/html');
                    document.querySelector('#comment_content').value = '';
                    commentContainer.innerHTML = "";
                    commentContainer.append(elementHtml.querySelector('#commentList'))

                } else {
                    console.error(htmlResponse.status);
                }
            } catch (e) {
                console.error(e);
            }


        });


    </script>
{% endblock %}
