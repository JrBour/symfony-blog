{% extends 'layout/layout.html.twig' %}
{% block title %}{{ blog.title|capitalize }}{% endblock %}
{% block section %}
    <div class="success">
        <p></p>
    </div>
    <div class="error">
        <p></p>
    </div>

    <header style="background: url('{{blog.image}}'); background-position: center;background-size: cover;" class="header_post">
        <h1>{{ blog.title }}</h1>
    </header>

    <p>{{ blog.description }}</p>
    <p>{{ blog.createdAt|date("d/m/Y")  }}</p>

    <h2>D'autres articles qui pourraient vous plaire</h2>

    <ul class="articles">
        {% for article in randomArticles %}
            <a href="{{ path('blog_show', { 'id' : article.id }) }}">
                <li class="post">
                    <div style="background:url('{{ asset(article.image) }}'); height: 200px; width: 100%; background-position: center; background-size: cover"></div>
                    <div class="text_post">
                        <h2>{{ article.title }}</h2>
                        {% if article.description|length > 200 %}
                            {{article.description|slice(0,200) }}...
                        {% else %}
                            {{ article.description }}
                        {% endif %}<br>
                        <h4>by <a href="{{ path('profil_user', {'id' : article.author_id}) }}"><em>{{ article.author }}</em></a></h4>

                        {% if app.user and is_granted('ROLE_ADMIN') %}
                            <hr>
                            <div class="post__edit">
                                <a href="{{ path('blog_edit', { 'id' : article.id}) }}"><i class="far fa-edit"></i></a>
                                <a href="{{ path('blog_remove', { 'id' : article.id }) }}"><i class="fas fa-times"></i></a>
                            </div>
                        {% endif %}
                    </div>
                </li>
            </a>
        {% endfor %}
    </ul>
    <hr>

    {{form_start(form)}}
    <div class="form-group">
        {{form_row(form.content,{ 'attr' : {
            'class' : 'form-control'
        }})}}
    </div>
    {{form_row(form.submit,{ 'attr' : {
        'class' : 'btn btn-primary'
    }})}}
    {{form_end(form)}}


    <div id="comment__container">
        {% if comments %}
            <div class="comments_list" id="commentList">
                {% for comment in comments %}
                    <div class="comments" data-id="{{comment.id}}">
                        <div class="card">
                            <div class="card__header">
                                <a href="{{ path('profil_user', {id : comment.author.id}) }}" class="profil">
                                    <img src="{{ comment.author.image}}" alt="" class="profil_picture_post">
                                </a>
                                <div>
                                    <a href="{{ path('profil_user', {id : comment.author.id}) }}" class="profil">{{comment.author.username}}</a>
                                    <p>{{ comment.createdAt|date('M d') }}</p>
                                </div>
                            </div>

                            <div class="card-body">
                                <p class="card-text"><span class="content">{{ comment.content }}</span></p>
                            </div>

                            {% if app.user.id is defined and app.user.id == comment.author.id %}
                                <div class="card__settings">
                                    <i class="far fa-edit edit" data-id="{{comment.id}}"></i>
                                    <i class="fas fa-times remove_comment" data-id="{{comment.id}}"></i>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% endif %}
    </div>
{% endblock %}
{% block javascripts %}
    <script type="text/javascript">

        const editComments = document.querySelectorAll('.edit');
        const removeComments = document.querySelectorAll('.remove_comment');
        const comments = document.querySelector('.comments');
        const editContent = document.querySelectorAll('.editContentForm');
        const commentList = document.querySelector('#commentList');
        const commentContainer = document.querySelector('#comment__container');
        const parse = new DOMParser();

        let displayForm = false;
        let success = document.querySelector('.success');


        if (removeComments.length){

            const edit = value => {
                const dataId = value.dataset.id;
                const card = value.parentElement.parentElement;
                const cardText = card.firstElementChild.firstElementChild.lastElementChild
                const textContent = cardText.textContent;

                cardText.innerHTML = '';
                cardText.insertAdjacentHTML('beforeend',`<form name="editContent" onsubmit="editFormSubmit(event)" class="editContentForm"><input type="text" value="${textContent}" data-id="${dataId}" class="editContent" autofocus/></form>`)

                displayForm = true
            };


            const remove = async elem => {
                const elementToRemove = document.querySelector(`.comments[data-id="${elem.dataset.id}"]`);
                commentList.removeChild(elementToRemove);

                try {
                    const response = await fetch(`/comment/remove/${elem.dataset.id}`, {
                        method: 'get',
                        headers: {'X-Requested-With' : 'XMLHttpRequest'}
                    });

                    if (response.ok) {
                        const data = await response.json();
                        success.style.display = 'block';
                        success.firstElementChild.innerHTML = data.success;
                        setTimeout(() => {success.style.display = 'none'}, 2000);
                    } else {
                        console.error(response.status);
                    }
                } catch(e) {
                    console.error(e);
                }
            };

            removeComments.forEach(e => e.addEventListener('click', () => remove(e)));
            editComments.forEach(e => e.addEventListener('click', () => edit(e)));
        }

        const editFormSubmit = async e => {
            e.preventDefault();

            const dataId = document.querySelector('.editContent').dataset.id;
            const input = document.querySelector('input.editContent');
            const textContent = input.value;
            const content = input.parentElement.parentElement;

            const editComment = await fetch(`/comment/edit/${dataId}`, {
                method: 'post',
                headers: {'X-Requested-With': 'XMLHttpRequest'},
                body: JSON.stringify({id: dataId, content: textContent})
            });
            const res = await editComment.json();

            success.style.display = 'block';
            success.firstElementChild.innerHTML = res.success;
            setTimeout(() => success.style.display = 'none', 2000);
            content.innerText = input.value;
        }


        document.querySelector('[name=comment]').addEventListener('submit', async () => {
            const split = window.location.href.split('/');

            try {
                const response = await fetch(`/blog/${parseFloat(split[split.length - 1])}`, {
                    method : 'post',
                    headers: {'X-Requested-With' : 'XMLHttpRequest'},
                    body: JSON.stringify({content : $('#comment_content').val()})
                });

                if (!response.ok) {
                    console.error(response.status);
                }

                const htmlResponse = await fetch(`/blog/${parseFloat(split[split.length - 1])}`);
                if (htmlResponse.ok) {
                    const data = await htmlResponse.text();
                    const elementHtml = await parse.parseFromString(data, 'text/html');
                    commentContainer.innerHTML = "";
                    document.querySelector('#comment_content').value = '';
                    commentContainer.append(elementHtml.querySelector('#commentList'));

                } else {
                    console.error(htmlResponse.status);
                }

            } catch(e) {
                console.error(e);
            }

        });


    </script>
{% endblock %}
